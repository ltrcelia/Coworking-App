{
  "compilerOptions": {
    /* Configuration TypeScript pour CoworkSpace Backend */
    /* Basic Options */
    "target": "ES2020", /* ECMAScript target version */
    "lib": [
      "ES2020"
    ], /* Library files to include */
    "module": "commonjs", /* Module code generation */
    "moduleResolution": "node", /* Module resolution strategy */
    "allowJs": false, /* Allow JavaScript files to be compiled */
    "checkJs": false, /* Report errors in .js files */
    "outDir": "./dist", /* Output directory for compiled files */
    "rootDir": "./", /* Root directory of input files */
    "removeComments": false, /* Remove comments from output */
    "noEmit": false, /* Do not emit outputs */
    "incremental": true, /* Enable incremental compilation */
    "tsBuildInfoFile": "./dist/.tsbuildinfo", /* File to store incremental compilation info */
    /* Strict Type-Checking Options */
    "strict": true, /* Enable all strict type-checking options */
    "noImplicitAny": true, /* Raise error on expressions with implied 'any' type */
    "strictNullChecks": true, /* Enable strict null checks */
    "strictFunctionTypes": true, /* Enable strict checking of function types */
    "strictBindCallApply": true, /* Enable strict 'bind', 'call', and 'apply' methods */
    "strictPropertyInitialization": true, /* Enable strict checking of property initialization */
    "noImplicitReturns": true, /* Report error when not all code paths return a value */
    "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch */
    "noUncheckedIndexedAccess": false, /* Add 'undefined' to index signature results */
    "noImplicitOverride": true, /* Ensure overriding members are marked with override */
    /* Additional Checks */
    "noUnusedLocals": false, /* Report errors on unused locals */
    "noUnusedParameters": false, /* Report errors on unused parameters */
    "exactOptionalPropertyTypes": false, /* Interpret optional property types as written */
    "noPropertyAccessFromIndexSignature": false, /* Require undeclared properties to be accessed using element syntax */
    /* Module Resolution Options */
    "baseUrl": "./", /* Base directory to resolve non-relative module names */
    "paths": {
      "@domain/*": [
        "domain/*"
      ],
      "@application/*": [
        "application/*"
      ],
      "@infrastructure/*": [
        "infrastructure/*"
      ],
      "@presentation/*": [
        "presentation/*"
      ],
      "@shared/*": [
        "shared/*"
      ]
    },
    "esModuleInterop": true, /* Enables emit interoperability between CommonJS and ES Modules */
    "allowSyntheticDefaultImports": true, /* Allow default imports from modules with no default export */
    "forceConsistentCasingInFileNames": true, /* Disallow inconsistently-cased references */
    "resolveJsonModule": true, /* Include modules imported with .json extension */
    /* Source Map Options */
    "sourceMap": true, /* Generates corresponding .map files */
    "inlineSourceMap": false, /* Emit a single file with source maps instead of separate files */
    "inlineSources": false, /* Emit the source alongside the sourcemaps */
    /* Experimental Options */
    "experimentalDecorators": true, /* Enables experimental support for ES7 decorators */
    "emitDecoratorMetadata": true, /* Enables experimental support for emitting type metadata for decorators */
    /* Advanced Options */
    "skipLibCheck": true, /* Skip type checking of declaration files */
    "declaration": false, /* Generates corresponding .d.ts files */
    "declarationMap": false, /* Generates a sourcemap for each corresponding .d.ts file */
    "importHelpers": true, /* Import emit helpers from 'tslib' */
    "downlevelIteration": true, /* Provide full support for iterables in for-of, spread, and destructuring */
    "newLine": "lf" /* Use LF for line endings */
  },
  "include": [
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/*.test.ts",
    "**/*.spec.ts",
    "coverage",
    "*.config.ts",
    "*.config.js"
  ],
  "ts-node": {
    "esm": true,
    "experimentalSpecifierResolution": "node"
  }
}